openapi: 3.0.0
info:
  title: Molla - eCommerce API
  description: API for managing an eCommerce platform with features for customers, managers, and admins.
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Local server for development and testing

tags:
  - name: Common
    description: Common APIs for general use
  - name: Customer
    description: APIs for customer interactions and operations
  - name: Manager
    description: APIs for manager-specific operations
  - name: Admin
    description: APIs for administrative tasks

paths:

  # Common API
  /login:
    post: 
      tags: 
        - Common
      summary: Authenticate a user
      description: Authenticate a user and issue a token for subsequent requests.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "john.doe"
                  description: The username of the user.
                password:
                  type: string
                  example: "securepassword123"
                  description: The password of the user.
              required:
                - username
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                    description: The JWT token issued for authenticated requests.
                  message:
                    type: string
                    example: "Authentication successful"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing required fields"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /logout:
    post:
      tags:
        - Common
      summary: Logout a user
      description: Invalidate the user's authentication token.
      security:
        - bearerAuth: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  description: The JWT token to be invalidated.
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid token"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  # Customer API

  /products:
    get:
      tags: 
        - Customer
      summary: Get list of products with search, filter, and pagination
      description: Retrieve a list of products with optional search, filter, and pagination parameters.
      parameters:
        - name: search
          in: query
          description: Search term to filter products by name or description.
          required: false
          schema:
            type: string
        - name: filter
          in: query
          description: Filter criteria for products. Supports filtering by fields like type, price, stock, tags, categories, etc.
          required: false
          schema:
            type: object
            properties:
              type:
                type: string
              price:
                type: number
              stock:
                type: integer
              tags:
                type: array
                items:
                  type: string
              categories:
                type: array
                items:
                  type: string
        - name: page
          in: query
          description: Page number for pagination.
          required: false
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          description: Number of products per page.
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: A JSON array of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListProductComments'      
        '404':
          description: No products found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No products found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /products/{slug}:
    get:
      tags: 
        - Customer
      summary: Get a product by unique slug
      description: Retrieve a product by its unique slug string.
      parameters:
        - in: path
          name: slug
          required: true
          description: The unique slug of the product to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: A JSON object of the product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid slug format"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
 
  /rating:
    get:
      tags:
        - Customer
      summary: Get the rating of a product by unique name
      description: Retrieve the current rating of a product identified by its unique name.
      parameters:
        - in: query
          name: uniqueName
          required: true
          description: The unique name of the product whose rating is to be retrieved.
          schema:
            type: string
      responses:
        '200':
          description: A JSON object containing the product rating
          content:
            application/json:
              schema:
                type: object
                properties:
                  uniqueName:
                    type: string
                    example: "sample-product"
                    description: The unique name of the product.
                  rating:
                    type: integer
                    format: int32
                    example: 4
                    description: The current rating of the product, typically on a scale from 1 to 5.
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid unique name format"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

    post:
      tags: 
        - Customer
      security:
        - bearerAuth: []
      summary: Rate a product by id
      description: Rate a product identified by its id.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
      #   - in: query
      #     name: uniqueName
      #     required: true
      #     description: The unique name of the product to rate.
      #     schema:
      #       type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: 
                  type: integer
                  format: int32
                  example: 1
                  description: The product id
                rating:
                  type: integer
                  format: int32
                  example: 4
                  description: The rating value for the product, typically on a scale from 1 to 5.
      responses:
        '200':
          description: Product rated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product rated successfully"
                  totalRating:
                    type: integer
                    example: 4
                    description: The updated total rating for the product.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid rating value"

        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

    put:
      tags: 
        - Customer
      security:
        - bearerAuth: []        
      summary: Update the rating of a product by id
      description: Update the existing rating of a product identified by its id.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"            
      # parameters:
      #   - in: query
      #     name: uniqueName
      #     required: true
      #     description: The unique name of the product to update the rating for.
      #     schema:
      #       type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId: 
                  type: integer
                  format: int32
                  example: 1
                  description: The product id
                rating:
                  type: integer
                  format: int32
                  example: 4
                  description: The new rating value for the product, typically on a scale from 1 to 5.
      responses:
        '200':
          description: Product rating updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product rating updated successfully"
                  totalRating:
                    type: integer
                    example: 4
                    description: The updated total rating for the product.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid rating value"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /customer/articles:
    get: 
      tags:
        - Customer
      summary: Get a list of articles
      description: Retrieve a list of articles with optional filtering and pagination.
      parameters:
        - in: query
          name: search
          description: Search term to filter articles by title or content.
          schema:
            type: string
        - in: query
          name: filter
          description: Filter articles based on specific criteria (e.g., category, author).
          schema:
            type: string
        - in: query
          name: page
          description: The page number for pagination.
          schema:
            type: integer
            format: int32
            example: 1
        - in: query
          name: pageSize
          description: The number of articles per page.
          schema:
            type: integer
            format: int32
            example: 10
      responses:
        '200':
          description: A JSON array of articles
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                    description: The current page number.
                  pageSize:
                    type: integer
                    example: 10
                    description: The number of articles per page.
                  total:
                    type: integer
                    example: 100
                    description: The total number of articles available.
                  articles:
                    type: array
                    items:
                      $ref: '#/components/schemas/ArticleList'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /customer/articles/{slug}:
    get:
      tags:
        - Customer
      summary: Get an article by slug
      description: Retrieve a single article identified by its unique slug.
      parameters:
        - in: path
          name: slug
          required: true
          description: The unique slug of the article to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: A JSON object of the article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Article not found"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid slug format"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /comments:
    get:
      tags: 
        - Customer    
      summary: Get comments for a product
      description: Retrieve a list of comments for a product identified by its unique name.
      parameters:
        - in: path
          name: uniqueName
          required: true
          description: The unique name of the product for which comments are to be retrieved.
          schema:
            type: string
        - in: query
          name: sortBy
          required: false
          description: Sort comments by a specific field (e.g., date, rating).
          schema:
            type: string
            enum:
              - date
              - rating
        - in: query
          name: order
          required: false
          description: Order of the sorted comments (ascending or descending).
          schema:
            type: string
            enum:
              - asc
              - desc
        - in: query
          name: limit
          required: false
          description: Number of comments per page (for pagination).
          schema:
            type: integer
            format: int32
        - in: query
          name: page
          required: false
          description: Page number for pagination.
          schema:
            type: integer
            format: int32      
      responses:
        '200':
          description: A JSON array of comments for the product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListProductComments'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product not found"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid parameters"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

    post:
      tags: 
        - Customer
      security:
        - bearerAuth: []            
      summary: Add a comment to a product
      description: Add a comment to a product identified by its unique name.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"            
        - in: path
          name: uniqueName
          required: true
          description: The unique name of the product to which the comment is to be added.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "This is a great product!"
                parentComment:
                  type: integer
                  format: int32
                  example: 0
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:                
                items:
                $ref: '#/components/schemas/ListProductComments'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid comment content"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /likes:
    post: 
      tags: 
        - Customer   
      security:
        - bearerAuth: []   
      summary: Like a product or an article
      description: Like a product or an article identified by its type and unique ID.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"         
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  example: "article"
                  description: The type of item to like, either "product" or "article".
                id:
                  type: integer
                  format: int32
                  example: 1
                  description: The unique identifier of the item to like.
              required:
                - type
                - id
      responses:
        '200':
          description: Item liked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item liked successfully"
                  likeCount:
                    type: integer
                    example: 123
                    description: The updated number of likes for the item.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid item type or identifier"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
   
  /cart:
    get: 
      tags: 
        - Customer   
      security:
        - bearerAuth: []         
      summary: Get the user's cart
      description: Retrieve the products in the user's cart.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
      responses:
        '200':
          description: A JSON array of products in the cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListCartItems'
        '401':
          $ref: '#/components/responses/UnauthorizedError'                  
        '404':
          description: Cart is empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Cart is empty"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /cart/items:
    post:
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Add a product to the cart
      description: Add a product to the user's cart.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                product_id:
                  type: integer
                  format: int32
                  example: "1"
                quantity:
                  type: integer
                  format: int32
                  example: 1
      responses:
        '200':
          description: Product added to cart
          content:
            # application/json:
            #   schema:
            #     type: object
                
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListCartItems'     
                properties:
                  message:
                    type: string
                    example: "Product added to cart"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid product unique name or quantity"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

    put: 
      tags: 
        - Customer  
      security:
        - bearerAuth: []          
      summary: Update the quantity of a product in the cart
      description: Update the quantity of a product in the user's cart.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"      
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                item_id:
                  type: integer
                  format: int32
                  example: "1"
                quantity:
                  type: integer
                  format: int32
                  example: 2
      responses:
        '200':
          description: Product quantity updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListCartItems'     
                properties:
                  message:
                    type: string
                    example: "Product quantity updated"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid product unique name or quantity"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /cart/items/{itemId}:
    delete:
      tags: 
        - Customer
      security:
        - bearerAuth: []        
      summary: Remove a product from the cart
      description: Remove a product from the user's cart using the item ID in the path.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
        - in: path
          name: item_id
          required: true
          description: The ID of the item to be removed from the cart.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Product removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product removed from cart"
                  cart_items:
                    type: array
                    items:
                      $ref: '#/components/schemas/CartItem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid item ID"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /cart/checkout:
    get:
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Checkout the cart
      description: Complete the checkout process for the products in the user's cart.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
      responses:
        '200':
          description: Cart checked out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  cart:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListCartItems'
                  message:
                    type: string
                    example: "Checkout completed successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid cart or checkout request"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  /customer/orders:
    get: 
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Get the user's orders
      description: Retrieve the orders placed by the user.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"      
      responses:
        '200':
          description: A JSON array of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'                  
        '404':
          description: No orders found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No orders found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
    post:
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Create a new order
      description: Place a new order with the products specified in the request.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "Alice Jones"
                phone:
                  type: string
                  example: "555-7890"
                shipping_address:
                  type: string
                  example: "123 Main St, Springfield, IL"
                  description: The shipping address for the order.
                payment_method:
                  type: string
                  example: "credit_card"
                  description: The payment method to be used for the order.
              required:
                - fullName
                - address
                - phone
                - shipping_address
                - payment_method
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: string
                    example: "order_456"
                    description: The unique identifier for the newly created order.
                  message:
                    type: string
                    example: "Order created successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid order data"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
  
  /customer/orders/{orderNumber}:
    get:
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Get an order by order number
      description: Retrieve an order by its order number.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
        - in: path
          name: orderNumber
          required: true
          description: The order number of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: A JSON object of the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid order number format"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"          

        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
    put:
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Update an order
      description: Update the details of an existing order identified by its unique order number.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"        
        - in: path
          name: orderNumber
          required: true
          description: The order number of the order to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: "shipped"
                  description: The updated status of the order (e.g., "pending", "shipped", "delivered").
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                        format: int32
                        example: 101
                        description: The unique identifier of the product.
                      quantity:
                        type: integer
                        example: 2
                        description: The quantity of the product.
                  description: The updated list of items in the order.
              required:
                - status
                - items
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order updated successfully"                    
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid order details"
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"
    
    delete: 
      tags: 
        - Customer
      security:
        - bearerAuth: []        
      summary: Cancel an order
      description: Cancel an existing order identified by its order number.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"
        - in: path
          name: orderNumber
          required: true
          description: The order number of the order to cancel.
          schema:
            type: string
      responses:
        '200':
          description: Order canceled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order canceled successfully"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid order number format"
        '401':
          $ref: '#/components/responses/UnauthorizedError'     
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"                         
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"  
  
  /customer/register:     
    post:
      tags: 
        - Customer    
      security:
        - bearerAuth: []        
      summary: Register a new user
      description: Register a new user with the provided details.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - fullName
                - email
                - password
              properties:
                fullName:
                  type: string
                  example: "Alice Jones"
                  description: The full name of the user.
                email:
                  type: string
                  format: email
                  example: "alice.jones@example.com"
                  description: The email address of the user.
                password:
                  type: string
                  minLength: 6
                  example: "password123"
                  description: The password for the user account. Must be at least 6 characters long.
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User registered successfully"
                  userId:
                    type: string
                    example: "1234567890"
                    description: The unique identifier for the newly registered user.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid user details"
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                    description: Details about validation errors.
        '401':
          $ref: '#/components/responses/UnauthorizedError'                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"        

  /customer/profile:
    get:
      tags: 
        - Common
      security:
        - bearerAuth: []          
      summary: Get the current user's profile
      description: Retrieve the profile of the currently logged in user.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"      
      responses:
        '200':
          description: A JSON object of the user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'                
        '404':
          description: Profile not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile not found"

    put:
      tags: 
        - Common    
      security:
        - bearerAuth: []        
      summary: Update the user's profile
      description: Update the profile of the currently logged-in user.
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Bearer token for authentication.
          schema:
            type: string
            example: "Bearer <token>"        
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullName:
                  type: string
                  example: "Alice Jones"     
                address:
                  type: string
                  example: "789 Oak St"
                phone:
                  type: string
                  example: "555-7890"
                dob: 
                  type: string
                  example: "1992-03-10"              
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid profile details"
                  errors:
                    type: object
                    additionalProperties:
                      type: string
                    description: Details about validation errors.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "An unexpected error occurred"

  # Manager API




  # Admin API

  # GET /admin/users:
  # GET /admin/users/{id}
  # POST /admin/permissions
  # PUT /admin/permissions
  # DELETE /admin/permissions/{name}


components:
  responses:
      UnauthorizedError:
        description: Authentication information is missing or invalid
        headers:
          WWW_Authenticate:
            schema:
              type: string
              
  schemas:
    Product: 
      type: object
      properties:
        id: 
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "T-shirt"    
        uniqueName:
          type: string
          example: "t-shirt-1"

        description:
          type: string
          example: "A comfortable t-shirt"
        images:
          type: array
          items:
            $ref: '#/components/schemas/ProductImage'  
        type:
          type: array
          example: [Clothing]
        price:
          type: number
          format: float
          example: 19.99
        stock: 
          type: integer
          format: int32
          example: 100
        tags: 
          type: array
          example: ["t-shirt", "clothing"]
        categories:
          type: array
          example: ["clothing"]
        total_comment:  
          type: integer
          format: int32
          example: 10
        total_rating:
          type: integer
          format: int32
          example: 4
        createdAt:
          type: string
          example: "2021-01-01 12:00:00"
        # updatedAt:
        #   type: string
        #   example: "2021-01-01 12:00:00"
        # createdBy:
        #   type: integer
        #   format: int32
        #   example: 1
        # updatedBy:
        #   type: integer
        #   format: int32
        #   example: 1
        active:
          type: boolean
          example: true
    
    ProductImage:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        url:
          type: string
          example: "https://example.com/image.jpg"
        type:
          type: string
          example: "thumbnail"
        active:
          type: boolean
          example: true  

    ListProducts:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: integer
          format: int32
          example: 10
        page:
          type: integer
          format: int32
          example: 1
        limit:
          type: integer
          format: int32
          example: 10
        totalPages:
          type: integer
          format: int32
          example: 1
        hasNextPage:
          type: boolean
          example: false
        hasPrevPage:
          type: boolean
          example: false
        nextPage:
          type: integer
          format: int32
          example: 2
        prevPage:
          type: integer
          format: int32
          example: 1

    Article:
      type: object
      properties:
        id: 
          type: integer
          format: int32
          example: 1
        title: 
          type: string
          example: "There Many Variations"
        content: 
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam."
        author_id: 
          type: integer
          format: int32
          example: 1
        total_comment:
          type: integer
          format: int32
          example: 120
        total_likes:
          type: integer
          format: int32
          example: 120
        created_at:
          type: string
          format: date-time
          example: "2024-08-20T12:34:56Z"

    ArticleList:
      type: object
      properties:
        page:
          type: integer
          example: 1
          description: The current page number.
        pageSize:
          type: integer
          example: 10
          description: The number of articles per page.
        total:
          type: integer
          example: 100
          description: The total number of articles available.
        articles:
          type: array
          items:
            $ref: '#/components/schemas/Article'            
            
    ProductComment:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        productId:
          type: integer
          format: int32
          example: 1
        createdBy:
          type: integer
          format: int32
          example: 1  
        fullName:
          type: string
          example: "Alice Jones"
        content:
          type: string
          example: "This is a great product!"
        createdAt:
          type: string
          example: "2021-01-01 12:00:00"
        updatedAt:
          type: string
          example: "2021-01-01 12:00:00"
        parentComment:
          type: integer
          format: int32
          example: 0
        totalLikes:
          type: integer
          format: int32
          example: 10    

    ListProductComments: 
      type: object
      properties:
        comments:
          type: array
          items:
            $ref: '#/components/schemas/ProductComment'
        total:
          type: integer
          format: int32
          example: 10
        page:
          type: integer
          format: int32
          example: 1
        limit:
          type: integer
          format: int32
          example: 10
        totalPages:
          type: integer
          format: int32
          example: 1
        hasNextPage:
          type: boolean
          example: false
        hasPrevPage:
          type: boolean
          example: false
        nextPage:
          type: integer
          format: int32
          example: 2
        prevPage:
          type: integer
          format: int32
          example: 1

    CartItem:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        product: 
          type: object
          $ref: '#/components/schemas/Product'  
        quantity:
          type: integer
          format: int32
          example: 1
        subTotal:
          type: number
          format: float
          example: 19.99

    ListCartItems: 
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalPrice:
          type: number
          format: float
          example: 19.99

    OrderItem: 
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1  
        product:
          type: object
          $ref: '#/components/schemas/Product'
        price: 
          type: number
          format: float
          example: 19.99
        discount:
          type: number
          format: float
          example: 0
        quantity:
          type: integer
          format: int32
          example: 1
        amount:
          type: number
          format: float
          example: 19.99

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        orderNumber:
          type: string
          example: "ORD123456"
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          example: 19.99
        status:
          type: string
          example: "Pending"
        createdAt:
          type: string
          example: "2021-01-01 12:00:00"
        updatedAt:
          type: string
          example: "2021-01-01 12:00:00"
        createdBy:
          type: integer
          format: int32
          example: 1
        updatedBy:
          type: integer
          format: int32
          example: 1
        active:
          type: boolean
          example: true 

    PermissionGroup:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "Customer"
        permissions:
          type: array
          # items:
          #   $ref: '#/components/schemas/Permission'
          example: [ 
                {"resource": "post", "action": { "create": false, "read": true, "update": false, "delete": false } }, 
                { "resource": "comment", "action": { "create": true, "read": true, "update": true, "delete": true }}]
        active:
          type: boolean
          example: true

    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 3
        fullName:
          type: string
          example: "Alice Jones"
        email: 
          type: string
          example: "alice.jones@example.com"
        # password:
        #   type: string
        #   example: "$2b$10$zVQ.FB77IECAfCt7uENASO4bAV8IKIhGQJJGMbIuNmYP70LzBkbCC"
        permission_group:
          $ref: '#/components/schemas/PermissionGroup'
          # type: integer
          # format: int32
          # example: 1
        address:
          type: string
          example: "789 Oak St"
        phone:
          type: string
          example: "555-7890"
        dob: 
          type: string
          example: "1992-03-10"
        lastLogin:
          type: string
          example: "2021-01-01 12:00:00"
        createdAt:
          type: string
          example: "2021-01-01 12:00:00"
        updatedAt:
          type: string
          example: "2021-01-01 12:00:00"
        active:
          type: boolean
          example: true


